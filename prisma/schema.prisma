// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  status      Boolean   @default(true)
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  slug        String?   @unique
  Comic       Comic[]
}

model Comic {
  id            String         @id @default(cuid())
  title         String
  description   String?
  status        Boolean        @default(true)
  isDeleted     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  slug          String?        @unique
  category      Category[]
  author        Author[]
  chapter       Chapter[]
  comicTracking ComicTracking?
  comment       Comment[]
}

model Chapter {
  id            String         @id @default(cuid())
  title         String
  isPublic      Boolean        @default(true)
  isDeleted     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  slug          String?        @unique
  comicId       String
  comic         Comic?         @relation(fields: [comicId], references: [id])
  chapterDetail ChapterDetail?
  Comment       Comment[]
}

model ChapterDetail {
  id        String    @id @default(cuid())
  content   String?
  images    String?
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  chapterId String    @unique
  chapter   Chapter?  @relation(fields: [chapterId], references: [id])
}

model ComicTracking {
  id        String    @id @default(cuid())
  comicId   String    @unique
  views     Int       @default(0)
  follow    Int       @default(0)
  likes     Int       @default(0)
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  comic     Comic?    @relation(fields: [comicId], references: [id])
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  comicId   String
  comic     Comic?    @relation(fields: [comicId], references: [id])
  chapterId String?
  chapter   Chapter?  @relation(fields: [chapterId], references: [id])
}

model Author {
  id          String    @id @default(cuid())
  name        String
  description String?
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  slug        String?   @unique
  Comic       Comic[]
}
